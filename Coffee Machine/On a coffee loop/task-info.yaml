type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import machine.MainKt;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Main.kt
  visible: true
  text: |
    package machine

    import java.util.*;



    fun main() {
        val sc = Scanner(System.`in`)
        var selectOption: String
        var coffeeOptions: Int
        var moneyProcess: Int
        var amountWater = 400
        var amountMilk = 540
        var amountCoffee = 120
        var amountCups = 9
        var amountMoney = 550

        fun initialValues() {
            println("$amountWater of water")
            println("$amountMilk of milk")
            println("$amountCoffee of coffee beans")
            println("$amountCups of disposable cups")
            println("$amountMoney of money")
        }

        fun fillMachine() {
            println("Write how many ml of water do you want to add:")
            val waterAdd: Int = sc.nextInt()
            println("Write how many ml of milk do you want to add:")
            val milkAdd: Int = sc.nextInt()
            println("Write how many ml grams of coffee beans do you want to add:")
            val coffeeAdd: Int = sc.nextInt()
            println("Write how many disposable cups of coffee do you want to")
            val cupsAdd: Int = sc.nextInt()
            amountWater += waterAdd
            amountMilk += milkAdd
            amountCoffee += coffeeAdd
            amountCups += cupsAdd
            println("$amountWater of water")
            println("$amountMilk of milk")
            println("$amountCoffee of coffee beans")
            println("$amountCups of disposable cups")
            println("$amountMoney of money")
        }

        fun buyEspresso() {
            amountWater -= 250
            amountCoffee -= 16
            amountCups -= 1
            amountMoney += 4
            println("$amountWater of water")
            println("$amountMilk of milk")
            println("$amountCoffee of coffee beans")
            println("$amountCups of disposable cups")
            println("$amountMoney of money")
        }

        fun buyLatte() {
            amountWater -= 350
            amountMilk -= 75
            amountCoffee -= 20
            amountCups -= 1
            amountMoney += 7
            println("$amountWater of water")
            println("$amountMilk of milk")
            println("$amountCoffee of coffee beans")
            println("$amountCups of disposable cups")
            println("$amountMoney of money")
        }

        fun buyCappuccino() {
            amountWater -= 200
            amountCoffee -= 12
            amountMilk -= 100
            amountCups -= 1
            amountMoney += 6
            println("$amountWater of water")
            println("$amountMilk of milk")
            println("$amountCoffee of coffee beans")
            println("$amountCups of disposable cups")
            println("$amountMoney of money")
        }

        fun buyCoffee() {
            println()
            println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: ")
            coffeeOptions = sc.nextInt()
            when (coffeeOptions) {
                1 -> buyEspresso()
                2 -> buyLatte()
                3 -> buyCappuccino()
                else -> throw IllegalStateException("Unexpected value: $coffeeOptions")
            }
        }

        fun takeMoney() {
            moneyProcess = amountMoney - amountMoney
            println("I gave you $$amountMoney")
            println()
            println("$amountWater of water")
            println("$amountMilk of milk")
            println("$amountCoffee of coffee beans")
            println("$amountCups of disposable cups")
            println("$moneyProcess of money")
        }

        fun machineOption() {
            println("Write action (buy, fill, take): ")
            selectOption = sc.next()
            when (selectOption) {
                "buy" -> buyCoffee()
                "fill" -> fillMachine()
                "take" -> takeMoney()
                else -> throw IllegalStateException("Unexpected value: $selectOption")
            }
        }

        initialValues()
        machineOption()

    }

    /*

    public class CoffeeMachine {
        public static void main(String[] args) {
           CoffeeMachine coffeeMachine = new CoffeeMachine();
           coffeeMachine.machineOption();
        }

        Scanner sc = new Scanner(System.in);

        // variables declaration
        String selectOption;
        String coffeeOptions;
        int amountWater = 400;
        int amountMilk = 540;
        int amountCoffee = 120;
        int amountCups = 9;
        int amountMoney = 550;



        public void initialValues() {
            System.out.println();
            System.out.println("The coffee machine has:");
            System.out.println(amountWater+" of water");
            System.out.println(amountMilk+" of milk");
            System.out.println(amountCoffee+" of coffee beans");
            System.out.println(amountCups+" of disposable cups");
            System.out.println(amountMoney +" of money");
            System.out.println();
        }

        public void machineOption() {
            do {
                System.out.println("Write action (buy, fill, take, remaining, exit): ");
                selectOption = sc.next();
                switch (selectOption) {
                    case "buy":
                        buyCoffee();
                        break;
                    case "fill":
                        fillMachine();
                        break;
                    case "take":
                        takeMoney();
                        break;
                    case "remaining":
                        initialValues();
                        break;
                    case "exit":
                        break;
                }
            } while (!selectOption.equals("exit"));
        }

        public void buyCoffee() {
            System.out.println();
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:");

            coffeeOptions = sc.next();
            switch (coffeeOptions) {
                case "1":
                    buyEspresso();
                    break;
                case "2":
                    buyLatte() ;
                    break;
                case "3":
                    buyCappuccino();
                    break;
                case "back":
                    break;
                default:
                    throw new IllegalStateException("Out of our options: " + coffeeOptions);
            }
        }

        public void buyEspresso() {
            if (amountWater < 250) {
                waterAvailable();
            } else if (amountCoffee < 16 ) {
                coffeeAvailable();
            } else if (amountCups < 1) {
                cupsAvailable();
            } else {
                productsAvailable();
                getEspresso();
                System.out.println();
            }
        }

        public void getEspresso() {
            amountWater -= 250;
            amountCoffee -= 16;
            amountCups -= 1;
            amountMoney +=4;
        }

        public void buyLatte() {
            if (amountWater < 350) {
                waterAvailable();
            } else if (amountMilk < 75 ) {
                milkAvailable();
            } else if (amountCoffee < 16 ) {
                coffeeAvailable();
            } else if (amountCups < 1) {
                cupsAvailable();
            } else {
                productsAvailable();
                getLatte();
                System.out.println();
            }
        }

        public void getLatte() {
            amountWater -= 350;
            amountMilk -= 75;
            amountCoffee -= 20;
            amountCups -= 1;
            amountMoney += 7;
        }

        public void buyCappuccino() {
            if (amountWater < 200) {
                waterAvailable();
            } else if (amountCoffee < 12 ) {
                coffeeAvailable();
            } else if (amountCups < 1) {
                cupsAvailable();
            } else {
                productsAvailable();
                getCappuccino();
                System.out.println();
            }
        }

        public void getCappuccino(){
            amountWater -= 200;
            amountCoffee -= 12;
            amountMilk-= 100;
            amountCups -= 1;
            amountMoney += 6;
        }

        public void fillMachine() {
            System.out.println();
            System.out.println("Write how many ml of water do you want to add:");
            int waterAdd = sc.nextInt();
            System.out.println("Write how many ml of milk do you want to add:");
            int milkAdd = sc.nextInt();
            System.out.println("Write how many grams of coffee beans do you want to add:");
            int coffeeAdd = sc.nextInt();
            System.out.println("Write how many disposable cups of coffee do you want to add:");
            int cupsAdd = sc.nextInt();

            amountWater += waterAdd;
            amountMilk += milkAdd;
            amountCoffee += coffeeAdd;
            amountCups += cupsAdd;
            System.out.println();
        }

        public void takeMoney() {
            System.out.println("I gave you $"+amountMoney);
            amountMoney -= amountMoney;
            System.out.println();
        }

        public void productsAvailable() {
            System.out.println("I have enough resources, making you a coffee!");
        }

        public void coffeeAvailable() {
            System.out.println("Sorry, not enough coffee beans!");
            System.out.println();
        }

        public void waterAvailable() {
            System.out.println("Sorry, not enough water!");
        }

        public void milkAvailable() {
            System.out.println("I have enough resources, making you a coffee!");
            System.out.println();
        }

        public void cupsAvailable() {
            System.out.println("Sorry, not enough cups of coffee !");
            System.out.println();
        }
    }
     */
  learner_created: true
feedback_link: https://hyperskill.org/projects/67/stages/364/implement
status: Solved
record: 1
