type: edu
custom_name: stage3
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import machine.MainKt;

    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        boolean cond;
        int num;
        boolean showTests;
        TestClue(boolean c, int n, boolean showTests) {
            cond = c;
            num = n;
            this.showTests = showTests;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 0, true))
                    .setInput("300\n65\n111\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("600\n153\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("1400\n150\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("1400\n1500\n45\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 2, true))
                    .setInput("599\n250\n200\n10"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 867, true))
                    .setInput( "345640\n43423\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 1548, true))
                    .setInput("345640\n434230\n23234\n19246"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 172, true))
                    .setInput( "34564\n43423\n23234\n19246"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 0, false))
                    .setInput("399\n112\n111\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 3, false))
                    .setInput("2400\n249\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 1, false))
                    .setInput("1400\n1500\n44\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 2, false))
                    .setInput("500\n250\n200\n10"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 171, false))
                    .setInput("34564\n43423\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 1547, false))
                    .setInput("345640\n434230\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 868, false))
                    .setInput("345640\n43423\n23234\n19246")

            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.trim().split(":");
            String userOutput = lines[lines.length - 1].trim();
            String loweredOutput = userOutput.toLowerCase();
            boolean ans = clue.cond;
            int amount = clue.num;
            if (ans && loweredOutput.contains("yes")) {
                if (amount > 0) {
                    boolean isCorrect = loweredOutput.contains(Integer.toString(amount));
                    if (isCorrect) {
                        return CheckResult.correct();
                    } else {

                        String rightOutput =
                            "Yes, I can make that amount of coffee" +
                                " (and even " + amount + " more than that)";

                        if (clue.showTests) {
                            return new CheckResult(false,
                                userOutput + " " + rightOutput);
                        } else {
                            return CheckResult.wrong("");
                        }
                    }
                }
                return CheckResult.correct();
            } else {
                boolean cond1 = loweredOutput.contains("no");
                boolean cond2 = loweredOutput.contains(Integer.toString(amount));

                if (cond1 && cond2) {
                    return CheckResult.correct();
                } else {

                    String rightOutput = "No, I can make only " +
                        amount +" cup(s) of coffee";

                    if (clue.showTests) {
                        return new CheckResult(false, rightOutput);
                    } else {
                        return CheckResult.wrong("");
                    }
                }
            }
        }
    }
  learner_created: false
- name: src/machine/Main.kt
  visible: true
  text: |
    package machine

    import java.util.*;

    fun main() {
        val scanner = Scanner(System.`in`)

        print("Write how many cups of coffee you will need: ")
        val cups = scanner.nextInt()
        println("For $cups cups of coffee you will need:")
        val water = 200 * cups
        println("$water ml of water")
        val milk = 50 * cups
        println("$milk ml of milk")
        val coffee = 15 * cups
        println("$coffee g of coffee beans")

    }


    /*

    public class CoffeeMachine {
        public static void main(String[] args) {
           CoffeeMachine coffeeMachine = new CoffeeMachine();
           coffeeMachine.machineOption();
        }

        Scanner sc = new Scanner(System.in);

        // variables declaration
        String selectOption;
        String coffeeOptions;
        int amountWater = 400;
        int amountMilk = 540;
        int amountCoffee = 120;
        int amountCups = 9;
        int amountMoney = 550;



        public void initialValues() {
            System.out.println();
            System.out.println("The coffee machine has:");
            System.out.println(amountWater+" of water");
            System.out.println(amountMilk+" of milk");
            System.out.println(amountCoffee+" of coffee beans");
            System.out.println(amountCups+" of disposable cups");
            System.out.println(amountMoney +" of money");
            System.out.println();
        }

        public void machineOption() {
            do {
                System.out.println("Write action (buy, fill, take, remaining, exit): ");
                selectOption = sc.next();
                switch (selectOption) {
                    case "buy":
                        buyCoffee();
                        break;
                    case "fill":
                        fillMachine();
                        break;
                    case "take":
                        takeMoney();
                        break;
                    case "remaining":
                        initialValues();
                        break;
                    case "exit":
                        break;
                }
            } while (!selectOption.equals("exit"));
        }

        public void buyCoffee() {
            System.out.println();
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:");

            coffeeOptions = sc.next();
            switch (coffeeOptions) {
                case "1":
                    buyEspresso();
                    break;
                case "2":
                    buyLatte() ;
                    break;
                case "3":
                    buyCappuccino();
                    break;
                case "back":
                    break;
                default:
                    throw new IllegalStateException("Out of our options: " + coffeeOptions);
            }
        }

        public void buyEspresso() {
            if (amountWater < 250) {
                waterAvailable();
            } else if (amountCoffee < 16 ) {
                coffeeAvailable();
            } else if (amountCups < 1) {
                cupsAvailable();
            } else {
                productsAvailable();
                getEspresso();
                System.out.println();
            }
        }

        public void getEspresso() {
            amountWater -= 250;
            amountCoffee -= 16;
            amountCups -= 1;
            amountMoney +=4;
        }

        public void buyLatte() {
            if (amountWater < 350) {
                waterAvailable();
            } else if (amountMilk < 75 ) {
                milkAvailable();
            } else if (amountCoffee < 16 ) {
                coffeeAvailable();
            } else if (amountCups < 1) {
                cupsAvailable();
            } else {
                productsAvailable();
                getLatte();
                System.out.println();
            }
        }

        public void getLatte() {
            amountWater -= 350;
            amountMilk -= 75;
            amountCoffee -= 20;
            amountCups -= 1;
            amountMoney += 7;
        }

        public void buyCappuccino() {
            if (amountWater < 200) {
                waterAvailable();
            } else if (amountCoffee < 12 ) {
                coffeeAvailable();
            } else if (amountCups < 1) {
                cupsAvailable();
            } else {
                productsAvailable();
                getCappuccino();
                System.out.println();
            }
        }

        public void getCappuccino(){
            amountWater -= 200;
            amountCoffee -= 12;
            amountMilk-= 100;
            amountCups -= 1;
            amountMoney += 6;
        }

        public void fillMachine() {
            System.out.println();
            System.out.println("Write how many ml of water do you want to add:");
            int waterAdd = sc.nextInt();
            System.out.println("Write how many ml of milk do you want to add:");
            int milkAdd = sc.nextInt();
            System.out.println("Write how many grams of coffee beans do you want to add:");
            int coffeeAdd = sc.nextInt();
            System.out.println("Write how many disposable cups of coffee do you want to add:");
            int cupsAdd = sc.nextInt();

            amountWater += waterAdd;
            amountMilk += milkAdd;
            amountCoffee += coffeeAdd;
            amountCups += cupsAdd;
            System.out.println();
        }

        public void takeMoney() {
            System.out.println("I gave you $"+amountMoney);
            amountMoney -= amountMoney;
            System.out.println();
        }

        public void productsAvailable() {
            System.out.println("I have enough resources, making you a coffee!");
        }

        public void coffeeAvailable() {
            System.out.println("Sorry, not enough coffee beans!");
            System.out.println();
        }

        public void waterAvailable() {
            System.out.println("Sorry, not enough water!");
        }

        public void milkAvailable() {
            System.out.println("I have enough resources, making you a coffee!");
            System.out.println();
        }

        public void cupsAvailable() {
            System.out.println("Sorry, not enough cups of coffee !");
            System.out.println();
        }
    }
     */
  learner_created: true
feedback_link: https://hyperskill.org/projects/67/stages/362/implement
status: Solved
record: 3
